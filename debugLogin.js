import { createClient } from '@supabase/supabase-js';
import bcrypt from 'bcrypt';

// Configura√ß√£o do Supabase
const SUPABASE_URL = "https://kwlcofsbopfydilerggg.supabase.co";
const SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3bGNvZnNib3BmeWRpbGVyZ2dnIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MjAxMDMxMCwiZXhwIjoyMDU3NTg2MzEwfQ.BH2SXVq185HG6_MA-S6XS_6aows8mxmTjzsaBIYgNp4";

// Inicializa√ß√£o do cliente Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

async function testarConexaoELogin() {
  console.log("Testando conex√£o com o Supabase...");
  
  try {
    // Teste de conex√£o b√°sico (limitando a 1 resultado para ser mais eficiente)
    const { data: healthData, error: healthError } = await supabase
      .from('usuarios')
      .select('id')
      .limit(1);
    
    if (healthError) {
      console.error("‚ùå Erro na conex√£o com o Supabase:", healthError);
      return;
    }
    
    console.log("‚úÖ Conex√£o com o Supabase estabelecida com sucesso!");
    
    // Buscar o usu√°rio admin
    console.log("\nBuscando o usu√°rio admin...");
    const { data: adminUsuario, error: adminError } = await supabase
      .from('usuarios')
      .select('*')
      .eq('nome_usuario', 'admin')
      .eq('ativo', true)
      .single();
    
    if (adminError) {
      console.error("‚ùå Erro ao buscar usu√°rio admin:", adminError);
      return;
    }
    
    if (!adminUsuario) {
      console.error("‚ùå Usu√°rio admin n√£o encontrado!");
      return;
    }
    
    console.log("‚úÖ Usu√°rio admin encontrado!");
    console.log(`Nome: ${adminUsuario.nome_completo}`);
    console.log(`Email: ${adminUsuario.email}`);
    console.log(`Tipo: ${adminUsuario.tipo_usuario}`);
    
    // Testar verifica√ß√£o de senha
    console.log("\nTestando a verifica√ß√£o da senha...");
    const senhaCorreta = await bcrypt.compare('admin123', adminUsuario.senha);
    
    if (senhaCorreta) {
      console.log("‚úÖ Senha verificada com sucesso!");
    } else {
      console.error("‚ùå A senha n√£o corresponde!");
      console.log("üîß Sugest√£o: Execute o script criarAdmin.js novamente para resetar a senha");
    }
    
    // Buscar as permiss√µes do usu√°rio
    console.log("\nBuscando permiss√µes do usu√°rio...");
    const { data: permissoes, error: permError } = await supabase
      .from('permissoes_usuario')
      .select('*')
      .eq('usuario_id', adminUsuario.id)
      .single();
    
    if (permError) {
      console.error("‚ùå Erro ao buscar permiss√µes:", permError);
      return;
    }
    
    if (!permissoes) {
      console.error("‚ùå Permiss√µes do usu√°rio admin n√£o encontradas!");
      return;
    }
    
    console.log("‚úÖ Permiss√µes encontradas!");
    console.log(permissoes);
    
    console.log("\nüü¢ Todos os testes passaram com sucesso! O login deveria funcionar normalmente.");
    console.log("Se ainda estiver tendo problemas, verifique o console do navegador para erros adicionais.");
    
  } catch (error) {
    console.error("‚ùå Erro durante os testes:", error);
  }
}

// Executar a fun√ß√£o
testarConexaoELogin(); 